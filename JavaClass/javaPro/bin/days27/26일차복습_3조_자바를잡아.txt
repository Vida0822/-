1-1. Properties 컬렉션 클래스의 특징을 설명하세요. 
1) HashTable의 자식 클래스이다.
2) Map계열로 key와 value값(key+value=Entry) 형태로 데이터를 저장한다.
3) key와 Value 자료형 모드 String이다.
4) 설정 정보를 저장하는 컬렉션 클래스이다.

1-2. Properties 컬렉션 클래스를 사용해서 
   각 팀과 팀원의 정보를 
   String fileName = dir +"\\src\\com\\util\\team.properties";
   파일에 저장하는 코딩을 하세요. 

		String team01 = "이태규,김지은,설경인,윤재민,홍성철,김동현,박상범,이예진";            
		String team02 = "하동호,박진용,이혜진,김수민,신희민,진예림,박현주";                  
		String team03 = "박민종,심성환,이진우,홍찬기,김예지,하지예,탁인혁";                                                                   
		   
		Properties p=new Properties();
		p.setProperty("team01", "이태규,김지은,설경인,윤재민,홍성철,김동현,박상범,이예진");
		p.setProperty("team02", "하동호,박진용,이혜진,김수민,신희민,진예림,박현주");
		p.setProperty("team03", "박민종,심성환,이진우,홍찬기,김예지,하지예,탁인혁");
		
		String dir=System.getProperty("user.dir");
		String fileName = dir +"\\src\\com\\util\\team.properties";
		System.out.println(fileName);
		String comments="Team";
		try(FileWriter writer = new FileWriter(fileName)) {
			p.store(writer, comments);
			System.out.println("Save END");
		} catch (Exception e) {
			e.printStackTrace();
		}	

1-3.  Properties 컬렉션 클래스를 사용해서 
     위의 파일에서 팀 정보를 읽어와서 출력하는 코딩을 하세요 . 

     		String dir=System.getProperty("user.dir");
		String fileName = dir +"\\src\\com\\util\\team.properties";

		Properties l = new Properties();
		try(FileReader reader=new FileReader(fileName)) {
			l.load(reader);
			System.out.println(l.getProperty("team01"));
			System.out.println(l.getProperty("team02"));
			System.out.println(l.getProperty("team03"));
		} catch (Exception e) {
			e.printStackTrace();
		}

2.  HashMap 컬렉션 클래스를 사용해서 
    key - 팀명
    value - ArrayList<Member>
    로 저장해서 출력하는 코딩을 하세요. 
    ( 조건 2: Member 클래스는 이름, 나이 필드만 선언하세요 )

 		// [실행결과 예]
		// 1조 - 코린이조 ( 3명 )
		//         Member [name=안시은,age=30]               조건2: toString() 메서드를 오버라이딩한 것
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		// 2조 - 코딩을자바조( 3명 ) 
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		// 3조 - 자바잡스(3명 )       
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]   

	public static void main(String[] args) {
		String [] 팀1 = {  "안시은", "안시은", "안시은" };
		String [] 팀2 = {  "안시은", "안시은", "안시은" };
		String [] 팀3 = {  "안시은", "안시은", "안시은" };
	

		ArrayList<String> team1 = new ArrayList<String>();
		for (int i = 0; i < 팀1.length; i++) 			team1.add( 팀1[i]  );		
		System.out.println( team1 );
			 

		List<String> temp =  Arrays.asList(팀2); 
		ArrayList<String> team2 = new ArrayList<String>(temp);
		System.out.println(  team2 );
				 
		ArrayList<String> team3 = new ArrayList<String>(  Arrays.asList(팀3)   );
		System.out.println(  team3 );
		
		HashMap<String, ArrayList<String>>  class5Map = new HashMap<>();
		class5Map.put("1조", team1);
		class5Map.put("2조", team2);
		class5Map.put("3조", team3);
		
		printMap(  class5Map   );
	}

}
class Member{
	String name;
	int age;
	Member(String name,int age){
		this.name=name;
		this.age=age;
	}
	@Override
	public String toString() {
		return String.format("Member [name=%s,age=%d]",this.name,this.age);
	}
	
}
    
 3-1.  제네릭스(Generics) 란 ?
컴파일시의  타입을 체크해주는 기능이며 , 다양한 타입의 객체를 다루는 클래스나 메서드에서 사용한다.

 3-2. 제네릭스의 장점 
1)타입의 안정성 제공
2)타입체크와 형변환 생략가능

 3-3. 제네릭 클래스 선언 형식
클래스<T>

 3-4. 용어 정리
클래스 : 로우 타입
<T> : 타입 ,변수형을 나타내며 타입 변수 또는 타입 매개변수라고한다.
    
    clas Box<T>{}
    
   위의 제네틱 클래스 선언을 보고
    1) 원시 타입(raw Type)을 적으세요.
Box
    2)타입변수을 적으세요.
<T>
    3) 제네릭 클래스을 적으세요.
Box<T>
    
    Box<String> b = new Box<>();
    4) 대입된 타입을 적으세요.
String
    5) 제네릭 타입 호출
String

3-5. 제한된 제네릭 클래스에 대해서 설명하세요.  
    class FruitBox<T extends Fruit & Eatable>{
    }    
FruitBox 클래스에 타입변수로는 Fruit의 자식클래스이며 , Eatable을 구현한 타입만 올 수 있다.
3-6.  와일드 카드에 대해서 설명하세요. 
    static Juice makeJuice(FruitBox<? extends Fruit> box){
    }
타입변수에 상한과 하한을 제한할 수 있는기능이며, 위와 같은경우 상한을 제한하는 의미이다.

3-7. 제네릭 메서드란 ? 
메서드의 선언부에 제네릭 타입이 선언된 메서드이다.

3-8. 제네릭 메서드 선언 형식을 적으세요. 
접근지정자 기타제어자 <T>리턴자료형 메서드명() { }

4-1. 열거형(enums)이란 ? 
관련된 상수를 편리하게 선언하기 위한 것

4-2. 열거형의 선언 형식을 적으세요. 
enum 열거형명{상수명1,상수명2,...}
    
    
    
         
         