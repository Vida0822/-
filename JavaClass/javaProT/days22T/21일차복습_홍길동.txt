1.  년도 year를 입력받아서 
    입력받은 년도의 1월~12월 까지의 마지막 날짜를 출력하는 코딩을 하세요. 
    ( 조건 : Calendar 클래스 사용 )
    ( 조건 : Scanner 클래스 사용 + try~with~resource문 사용)
    
    실행결과 예제)
    2005년 
    
	1월 : 31일
	2월 : 28일
	3월 : 31일
	4월 : 30일
	5월 : 31일
	6월 : 30일
	7월 : 31일
	8월 : 31일
	9월 : 30일
	10월 : 31일
	11월 : 30일
	12월 : 31일
	
	int year, lastDay;
		try (Scanner scanner = new Scanner(System.in)){
			System.out.print("> 년도 입력 ? ");
			year = scanner.nextInt();
			System.out.printf("%d년\n", year);
			
			Calendar c = new GregorianCalendar(year, 1-1, 1); // 2005.1.1
			
			for (int i = 1; i <=12; i++) {
				// 칼렌더의 월을 i 값으로 수정.
				c.set( Calendar.MONTH , i -1 );
				lastDay = c.getActualMaximum( Calendar.DATE );
				System.out.printf("%d월 : %d일\n", i, lastDay);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
 
 10:10 수업 시작~ 
2. [ Calendar 클래스 ]를 사용해서 
    오늘 날짜를 기준으로 주민등록번호 앞자리 6자리가 "980220" 인 사람이 
    생일의 지남 여부를 체크하는 코딩을 하세요. 
    
    String rrn = "980224";  // 24   생일 지났다.
		int month =  Integer.parseInt(   rrn.substring(2, 4)  );
		int day =   Integer.parseInt(   rrn.substring(4)  );
		
		Calendar t = Calendar.getInstance();
		t.set( Calendar.HOUR , 0);
		t.set( Calendar.MINUTE, 0);
		t.set( Calendar.SECOND, 0);
		t.set( Calendar.MILLISECOND, 0);  // Date 클래스 사용   : 밀리세컨드 get/set X
		// t.clear(Calendar.MILLISECOND);
		
		Calendar b = new GregorianCalendar(    t.get( Calendar.YEAR )   , month-1 , day );
		
		System.out.println(    t.getTimeInMillis()  );  // 1970.1.1.   0:0:0:000   long
		System.out.println(    b.getTimeInMillis()  );
		
		System.out.println(   t.after( b )   );   // true  지났다.
		System.out.println(   t.before( b )   );  // false
		System.out.println(   t.equals( b )   );  // false
		System.out.println(   t.compareTo( b )   );  // 0  1   -1
    
    
3. Calendar 클래스를 사용해서 
    오늘이 무슨 요일인지를 출력하세요. 
    
    실행결과)
    오늘은 "금요일"입니다.
    
    		Calendar t = Calendar.getInstance();
		// Date 클래스          0(일)~6(토)
		// Calendar 클래스   1(일)~7(토)                       6(금요일)
		int dayOfWeek = t.get(  Calendar.DAY_OF_WEEK ) ;
		// 오늘은 "금요일"입니다.
		System.out.printf("오늘은 \"%c요일\"입니다.\n", "_일월화수목금토".charAt(dayOfWeek));
    
4. 개강일(2023.1.26)로 부터 오늘까지 지난 일수 계산을 하세요.. 

Calendar s = new GregorianCalendar(2023, 1-1,26,  9, 0, 0 );
		Calendar t = Calendar.getInstance(); // 시간,분,초,밀세
		
		long sTime = s.getTimeInMillis(); 
		long tTime = t.getTimeInMillis();
		
		long gab = tTime - sTime; //   개강일~오늘(현재) 흐른   ms
		/*
		System.out.println( gab );  
		System.out.println( gab/1000 +"초" );  
		System.out.println( gab/(60*1000) +"분" );  
		System.out.println( gab/(60*60*1000) +"시간" ); 
		System.out.println( gab/(24*60*60*1000) +"일" );
		*/
		// [문제] 29일 ??시  ?? 분  ?? 초  ???밀리세컨드 
		
		// 11:12 + 5분
		//  11:17분 풀이~ 
		// 금액(머니) -> 5만원,1만원,5천원... 1원  ( 정보처리기사 실기 ) 
		/*
		System.out.println(   gab/(24*60*60*1000) +"일" );
		gab =  gab%(24*60*60*1000); 
		System.out.println( gab/(60*60*1000) +"시간" ); 
		gab =  gab%(60*60*1000); 
		System.out.println( gab/(60*1000) +"분" );  
		gab =  gab%(60*1000); 
		System.out.println( gab/1000 +"초" );  
		gab =  gab%(1000); 
		System.out.println( gab/1 +"밀리세컨드" );  
		*/
		
		int [] tunit = {  
				                   24*60*60*1000, 
				                   60*60*1000, 
				                   60*1000,
				                   1000, 
				                   1
				             }; 
		for (int i = 0; i < tunit.length; i++) {
			System.out.print( gab/tunit[i] +"_" );
			 gab %= tunit[i];
		}

5. 설문조사 기간이 
   시작일 2023.2.17    00:00:00
   종료일  2023.2.26  18:00:00
   일 때  오늘 현재 설문이 가능/불가능한지를 체크해서 출력하세요.
   
        Calendar   s = new GregorianCalendar(2023, 2-1, 17,  0, 0, 0 );
		Calendar   e = new GregorianCalendar(2023, 2-1, 26,  18, 0, 0 );
		Calendar   t = new GregorianCalendar( );
		
		long sTime = s.getTimeInMillis();
		long eTime = e.getTimeInMillis();
		long tTime = e.getTimeInMillis();
		
		 // if(t.after(s) && t.before(e)) {     시작일, 종료일 빠진 범위~~~
		//      e.before(t)    s.after(t)       가능
		// if( sTime <= tTime   && tTime <= eTime )  가능   







