1-1. Properties 컬렉션 클래스의 특징을 설명하세요. 
	Hashtable의 자식 클래스이다
	파일을 쓰고 읽는 역할을 한다
1-2. Properties 컬렉션 클래스를 사용해서 
   각 팀과 팀원의 정보를 
   String fileName = dir +"\\src\\com\\util\\team.properties";
   파일에 저장하는 코딩을 하세요. 
   
		String dir = System.getProperty("user.dir");
		String fileName = dir +"\\src\\com\\util\\team.properties";
		
		Properties p = new Properties();
		
		p.setProperty("연봉1조", "이태규, 김지은, 설경인, 윤재민, 홍성철, 김동현, 박상범, 이예진");
		p.setProperty("귀염2조", "하동호, 박진용, 이혜진, 김수민, 신희민, 진예림, 박현주");
		p.setProperty("자바를잡아", "박민종, 심성환, 이진우, 홍찬기, 김예지, 하지예 , 탁인혁");
		
		String teams = "teams";
		
	    try (FileWriter writer = new FileWriter(fileName)){
	    	p.store(writer, teams);
	    	System.out.println("Save END");
		} catch (Exception e) {
			e.printStackTrace();
		}
   
1-3.  Properties 컬렉션 클래스를 사용해서 
     위의 파일에서 팀 정보를 읽어와서 출력하는 코딩을 하세요 . 
     
     	String dir = System.getProperty("user.dir");
		String fileName = dir +"\\src\\com\\util\\team.properties";
		
		Properties p = new Properties();
		
		try (FileReader reader = new FileReader(fileName)){
			p.load(reader);
			System.out.println(p.getProperty("연봉1조"));
			System.out.println(p.getProperty("귀염2조"));
			System.out.println(p.getProperty("자바를잡아"));
		} catch (Exception e) {
			e.printStackTrace();
		}
     
2.  HashMap 컬렉션 클래스를 사용해서 
    key - 팀명
    value - ArrayList<Member>
    로 저장해서 출력하는 코딩을 하세요. 
    ( 조건 2: Member 클래스는 이름, 나이 필드만 선언하세요 )

 		// [실행결과 예]
		// 1조 - 코린이조 ( 3명 )
		//         Member [name=안시은,age=30]               조건2: toString() 메서드를 오버라이딩한 것
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		// 2조 - 코딩을자바조( 3명 ) 
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		// 3조 - 자바잡스(3명 )       
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]
		//         Member [name=안시은,age=30]   
    
 3-1.  제네릭스(Generics) 란 ?
 	다양한 타입의 객체를 다루는 메서드로 컬렉션 클래스에서 컴파일 시 타입을 체크해주는 역할을 한다
 	제네릭스를 활용해서 타입에 유연하게 사용할 수 있다
 3-2. 제네릭스의 장점 
 	맞지 않은 타입은 예외를 발생시켜 타입의 안정성을 제공한다
 	타입 체크와 형변환을 생략함으로 코드가 간결해진다
 3-3. 제네릭 클래스 선언 형식
 	클래스명 뒤에 <T>을 붙인다
 3-4. 용어 정리
    
    clas Box<T>{}
    
   위의 제네틱 클래스 선언을 보고
    1) 원시 타입(raw Type)을 적으세요.
    Box
    2)타입변수을 적으세요.
    T
    3) 제네릭 클래스을 적으세요.
    Box<T>
    
    Box<String> b = new Box<>();
    4) 대입된 타입을 적으세요.
    String
    5) 제네릭 타입 호출
    
3-5. 제한된 제네릭 클래스에 대해서 설명하세요.  
    class FruitBox<T extends Fruit & Eatable>{
    }    
3-6.  와일드 카드에 대해서 설명하세요. 
    static Juice makeJuice(FruitBox<? extends Fruit> box){
    }
3-7. 제네릭 메서드란 ? 
3-8. 제네릭 메서드 선언 형식을 적으세요. 

4-1. 열거형(enums)이란 ? 
	서로 관련된 상수를 묶어서 편리하게 선언하기 위한 것
4-2. 열거형의 선언 형식을 적으세요. 
	enum 열거형이름 { 상수명1, 상수명 2, ... }
    
    
    
         
         