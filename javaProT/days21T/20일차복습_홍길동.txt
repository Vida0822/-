1. 3조 팀원들의 이름만 names 배열에 넣고
   내림차순으로 정렬해서 아래와 같이 출력하세요.
  String team03 = "3조_자바를 잡아  : [팀장]박민종(*), 심성환(*), 이진우(*), 홍찬기(*), 김예지, 하지예 , 탁인혁 (목요일)";
  ( 조건 : StringTokenizer 클래스 사용해서 잘라내기 )
  

		String team03 = "3조_자바를 잡아  : [팀장]박민종(*), 심성환(*), 이진우(*), 홍찬기(*), 김예지, 하지예 , 탁인혁 (목요일)";
		// String team03 = "박민종, 심성환, 이진우, 홍찬기, 김예지, 하지예 , 탁인혁";
		// 1. team03  팀명을 제외한 문자들은 제거..  String.replace(대상문자열, "");
		// StringBuffer sb = new StringBuffer(team03);
		String regex = ".*\\[팀장\\]|\\(\\*\\)|\\(.{3}\\)";
		team03 = team03.replaceAll(regex, "");
		// System.out.println( team03 ); 박민종     ,    심성환   , 이진우, 홍찬기, 김예지, 하지예 , 탁인혁
		StringTokenizer st = new StringTokenizer(team03, ",");
		int size = st.countTokens();
		String [] names = new String[size];
		int idx = 0;
		while (st.hasMoreTokens()) {
			 String name =  st.nextToken();
			 // System.out.println( name.trim() ); // 출력 -> names 배열 저장
			 names[idx++] = name.trim();
		}
		System.out.println(    Arrays.toString(   names  )  );
		// 1. 오름차순 정렬
		/*
		Arrays.sort(  names  );
		// 2.  Reverse
		String [] temp = new String[ names.length ];
		for (int i = 0; i < names.length; i++)   temp[6-i] =   names[i];
		names  = temp;
		*/
		
		/*
		Arrays.sort(names, new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {				
				return  o2.compareTo(o1) ; // 
			}
		} );
		*/
		//                               람다식
		// Arrays.sort(names, ( o1,  o2) -> o2.compareTo(o1) );
		
		// 검색
		Arrays.sort(names ,  Collections.reverseOrder()   );
		
		System.out.println(    Arrays.toString(   names  )  );
  
  
  
  
2. days20.Ex12.java 파일을 읽어서 알파벳 대소문자 구분해서 
    알파벳 갯수와 막대그래프를 그리세요. 

 A(20) : ####################
 B(13) : ############
 
 Z(0)  :  
 a(2)   : ##
 
 z(3)   : ###
 
 // 파일의 경로
		// 1) 절대 경로 :
		// E:\Class\SS18Class\Workspace\JavaClass\javaPro
		String dir =  System.getProperty("user.dir");  // key
	    String path	 =  String.format("%s\\src\\days20\\Ex12.java", dir);
	    System.out.println( path );
		
		// 2) 상대 경로 :             .                    ..
	    //  path = ".\\src\\days20\\Ex12.java";
		
	    // 0 행 대문자 갯수
	    // 1 행 소문자 갯수
	    // int [][] counts = new int[2][26];
	    
	    // try ~ with ~ resource 문  
	    try (  FileReader fr = new FileReader(path) ){
			  int code ;  // 한문자 -> int 반환하는 메서드
			  // 65 -> 0
			  // 90 -> 25
			  
			  // 97-> 0행 0열
			  // 122-> 
			  
			  int [] counts = new int[123];
			  
			  while (  ( code = fr.read() ) != -1  ) {
				  //  Character.isAlphabetic(code);
				  if(   Character.isUpperCase( code )  || Character.isLowerCase( code ) ) {
					  counts[code]++;
				  }
			  } // while
			  // 91~96 X
			  for (int i = 'A'; i <='z'; i++) {
				  System.out.printf(" %c(%d) : %s\n",
                          i  ,  counts[i], "■".repeat(counts[i]) );
				  if(  i== 90 ) i=96;
			 }
			  
			  
		} catch (Exception e) {
			// TODO: handle exception
		}
		
   
3.  잘라서 배열로 저장하기
  https://school.programmers.co.kr/learn/courses/30/lessons/120913
  
  class Solution {
    public String[] solution(String my_str, int n) {
        String[] answer = {};
        return answer;
    }
}
 \
 
 
 
 
 public static void main(String[] args) {
		// 10:00 제출  + 10
		// 10:10 수업 시작~ 
		// 11:04 수업 시작~ ( 2번 풀이 )
		String my_str =  "abcdef123"  ; // "abc1Addfggg4556b";   //
		int n =  	3	  ;  //  6;                                                   //
		// ["abc1Ad", "dfggg4", "556b"]
		// ["abc", "def", "123"]		 
		String [] answer =  solution(my_str, n);		
		System.out.println(  Arrays.toString( answer )    );

	} // main

	public static String[] solution(String my_str, int n) { 
		// 
		//  abc1Ad    dfggg4   556b   3개
		int my_strLength =  my_str.length();  // 문자열의 길이    16
		int size =    (int) Math.ceil( (double) my_strLength / n  );
		String[] answer = new String[size];  
		
		// my_str.substring(0, 6 );      0 포함    6 포함X             i+=n
		// my_str.substring(6, 12);
		// my_str.substring(12); 
		//                                    i / i+n
		// 11:49 + 10 분
		// 12:10 풀이~ 
		int i = 0, idx = 0;
		try {
			for (             ; i < my_strLength ; i+=n, idx++) {
			    answer[idx] =   my_str.substring(i, i+n );
		     } 
		} catch (Exception e) {
			answer[idx] =   my_str.substring(i);
		}
		
		return answer;
	}